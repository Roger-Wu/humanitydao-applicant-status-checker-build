{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","formatStrWithYesNo","isYes","str","react_default","createElement","className","results","0","1","2","addressToEtherscanLink","address","href","concat","target","rel","txHashToEtherscanLink","txHash","shortenTxHash","substring","App","state","accounts","humanityRegistryContract","humanityGovernanceContract","proposalIdText","proposal","voteEvents","removeVoteEvents","isSearching","componentDidMount","sent","eth","getAccounts","Contract","HumanityRegistryJSON","abi","networks","HumanityGovernanceJSON","_this","setState","alert","error","fetchProposalState","_callee2","_this$state","_ref3","_ref4","_context2","all","methods","getProposal","call","getPastEvents","filter","proposalId","fromBlock","slicedToArray","handleProposalIdTextChange","event","value","handleSearch","preventDefault","resultIdx","_this$state2","onSubmit","type","pattern","onChange","placeholder","role","feeRecipient","moment","parseInt","startTime","format","utils","fromWei","yesCount","noCount","result","length","map","index","values","returnValues","key","transactionHash","voter","approve","weight","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d10cb65.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://mainnet.infura.io/v3/\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"Using infura's Ethereum API.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport * as moment from 'moment';\n\nimport HumanityRegistryJSON from \"./contracts/HumanityRegistry.json\";\nimport HumanityGovernanceJSON from \"./contracts/HumanityGovernance.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nconst boolToYesNo = (isYes) => {\n  if (isYes) {\n    return <span className=\"text-success\">Yes</span>\n  } else {\n    return <span className=\"text-danger\">No</span>\n  }\n}\n\nconst formatStrWithYesNo = (isYes, str) => {\n  if (isYes) {\n    return <span className=\"text-success\">{ str }</span>\n  } else {\n    return <span className=\"text-danger\">{ str }</span>\n  }\n}\n\nconst results = {\n  0: <span className=\"text-info\">Pending</span>,\n  1: <span className=\"text-success\">Yes</span>,\n  2: <span className=\"text-danger\">No</span>,\n};\nconst resultIdxToString = resultIdx => {\n  return results[resultIdx];\n};\n\nconst addressToEtherscanLink = (address) => {\n  return <a href={ `https://etherscan.io/address/${address}` } target=\"_blank\" rel=\"noopener noreferrer\">{ address }</a>\n}\n\nconst txHashToEtherscanLink = (txHash) => {\n  const shortenTxHash = `${txHash.substring(0, 8)}...`\n  return <a href={ `https://etherscan.io/tx/${txHash}` } target=\"_blank\" rel=\"noopener noreferrer\">{ shortenTxHash }</a>\n}\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    humanityRegistryContract: null,\n    humanityGovernanceContract: null,\n    proposalIdText: '',\n    proposal: null,\n    voteEvents: [],\n    removeVoteEvents: [],\n    isSearching: false,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      const mainnetNetworkId = 1;\n      const humanityRegistryContract = new web3.eth.Contract(\n        HumanityRegistryJSON.abi,\n        HumanityRegistryJSON.networks[mainnetNetworkId].address\n      );\n      const humanityGovernanceContract = new web3.eth.Contract(\n        HumanityGovernanceJSON.abi,\n        HumanityGovernanceJSON.networks[mainnetNetworkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3,\n        accounts,\n        humanityRegistryContract,\n        humanityGovernanceContract,\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  // fetchProposalIdFromAddress\n\n  fetchProposalState = async () => {\n    const {\n      proposalIdText,\n      humanityRegistryContract,\n      humanityGovernanceContract,\n    } = this.state;\n\n    this.setState({ isSearching: true });\n\n    try {\n      const [proposal, voteEvents, removeVoteEvents] = await Promise.all([\n        humanityGovernanceContract.methods.getProposal(proposalIdText).call(),\n        humanityGovernanceContract.getPastEvents('Vote', {\n          filter: {\n            proposalId: proposalIdText,\n          },\n          fromBlock: 7723872,\n        }),\n        humanityGovernanceContract.getPastEvents('RemoveVote', {\n          filter: {\n            proposalId: proposalIdText,\n          },\n          fromBlock: 7723872,\n        }),\n      ]);\n      console.log('proposal', proposal);\n      console.log('voteEvents', voteEvents);\n      console.log('removeVoteEvents', removeVoteEvents);\n\n      this.setState({\n        isSearching: false,\n        proposal,\n        voteEvents,\n        removeVoteEvents,\n      });\n    } catch (error) {\n      console.error(error);\n      alert('Wrong Proposal ID.')\n      this.setState({ isSearching: false });\n    }\n  };\n\n  handleProposalIdTextChange = event => {\n    this.setState({proposalIdText: event.target.value});\n  }\n\n  handleSearch = event => {\n    event.preventDefault();\n    this.fetchProposalState();\n  }\n\n  render() {\n    const {\n      web3,\n      proposal,\n      voteEvents,\n      removeVoteEvents,\n      isSearching,\n    } = this.state;\n\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <span className=\"navbar-brand mb-0 h1\">HumanityDAO Applicant Status Checker</span>\n        </nav>\n\n        <div className=\"container pt-3 pb-3\">\n          <form onSubmit={this.handleSearch} className=\"form-inline justify-content-center mb-5\">\n            <input type=\"text\" pattern=\"\\d*\" className=\"form-control\" value={this.state.proposalIdText} onChange={this.handleProposalIdTextChange} placeholder=\"Proposal ID\" />\n            <input type=\"submit\" className=\"btn btn-primary\" value=\"Search\" />\n          </form>\n\n          { isSearching &&\n            <div className=\"spinner-grow\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          }\n\n          { proposal &&\n            <div className=\"mb-3\">\n              <h3>Proposal</h3>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td className=\"bg-gray\">Applicant</td>\n                    <td>{ addressToEtherscanLink(proposal.feeRecipient) }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Starting Time</td>\n                    <td>{ moment.unix(parseInt(proposal.startTime)).format('MMM DD YYYY HH:mm:ss Z') }</td>\n                    {/* <td>{ (new Date(parseInt(proposal.startTime) * 1000)).toISOString() }</td> */}\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Votes (Yes / No)</td>\n                    <td>{ formatStrWithYesNo(true, web3.utils.fromWei(proposal.yesCount)) } / { formatStrWithYesNo(false, web3.utils.fromWei(proposal.noCount)) }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Result</td>\n                    <td>{ resultIdxToString(proposal.result) }</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          }\n\n          { voteEvents.length > 0 &&\n            <div className=\"mb-3\">\n              <h3>Votes</h3>\n              <table className=\"table\">\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th>TX</th>\n                    <th>Voter</th>\n                    <th>Voted for</th>\n                    <th>Weight</th>\n                  </tr>\n                </thead>\n                <tbody>\n                {\n                  voteEvents.map((event, index) => {\n                    const values = event.returnValues;\n                    return <tr key={ 'vote-event-' + index }>\n                      <td>{ txHashToEtherscanLink(event.transactionHash) }</td>\n                      {/* <td>{ moment.unix(parseInt(event.startTime)).format('MMM DD YYYY HH:mm:ss Z') }</td> */}\n                      <td>{ addressToEtherscanLink(values.voter) }</td>\n                      <td>{ boolToYesNo(values.approve) }</td>\n                      <td>{ formatStrWithYesNo(values.approve, web3.utils.fromWei(values.weight)) }</td>\n                    </tr>;\n                  })\n                }\n                </tbody>\n              </table>\n            </div>\n          }\n\n          { removeVoteEvents.length > 0 &&\n            <div className=\"mb-3\">\n              <h3>Removed Votes</h3>\n            <table className=\"table\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th>TX</th>\n                  <th>Voter</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  removeVoteEvents.map((event, index) => {\n                    const values = event.returnValues;\n                    return <tr key={ 'vote-event-' + index }>\n                      <td>{ txHashToEtherscanLink(event.transactionHash) }</td>\n                      <td>{ addressToEtherscanLink(values.voter) }</td>\n                    </tr>;\n                  })\n                }\n                </tbody>\n              </table>\n            </div>\n          }\n        </div>\n\n        <footer className=\"footer bg-light\">\n          <div className=\"container\">\n            <div className=\"text-muted\"><a href=\"https://github.com/Roger-Wu/humanitydao-applicant-status-checker\" target=\"_blank\" rel=\"noopener noreferrer\">Source Code on GitHub</a></div>\n            <div className=\"text-muted\">Donate ETH or tokens: { addressToEtherscanLink('0x36fAa1e49fF125ac72ceae0d5a2E35bC9aDD6591') }</div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}