{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","provider","web3","wrap","_context","prev","next","Web3","providers","HttpProvider","console","log","stop","this","formatStrWithYesNo","isYes","str","react_default","createElement","className","results","0","1","2","addressToEtherscanLink","address","href","concat","target","rel","txHashToEtherscanLink","txHash","shortenTxHash","substring","App","state","accounts","humanityRegistryContract","humanityGovernanceContract","twitterHumanityApplicantContract","textToSearch","proposal","voteEvents","removeVoteEvents","applyEventsFromAddress","applyEventsFromProposalId","searchedAddress","isSearching","componentDidMount","sent","eth","getAccounts","Contract","HumanityRegistryJSON","abi","networks","HumanityGovernanceJSON","TwitterHumanityApplicantJSON","_this","setState","t0","alert","error","fetchProposalState","_callee2","_this$state","proposalIdStr","searchingAddress","_ref3","_ref4","_context2","utils","isAddress","getPastEvents","filter","applicant","fromBlock","length","returnValues","proposalId","all","methods","getProposal","call","slicedToArray","handleProposalIdTextChange","event","value","trim","handleSearch","preventDefault","resultIdx","username","_this$state2","onSubmit","type","onChange","placeholder","role","map","feeRecipient","moment","parseInt","startTime","format","fromWei","yesCount","noCount","result","index","values","key","transactionHash","voter","approve","weight","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22672b46.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // // Modern dapp browsers...\n      // if (window.ethereum) {\n      //   const web3 = new Web3(window.ethereum);\n      //   try {\n      //     // Request account access if needed\n      //     await window.ethereum.enable();\n      //     // Acccounts now exposed\n      //     resolve(web3);\n      //   } catch (error) {\n      //     reject(error);\n      //   }\n      // }\n      // // Legacy dapp browsers...\n      // else if (window.web3) {\n      //   // Use Mist/MetaMask's provider.\n      //   const web3 = window.web3;\n      //   console.log(\"Injected web3 detected.\");\n      //   resolve(web3);\n      // }\n      // // Fallback to localhost; use dev console port by default...\n      // else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://mainnet.infura.io/\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"Using infura's Ethereum API.\");\n        resolve(web3);\n      // }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport * as moment from 'moment';\n\nimport HumanityRegistryJSON from \"./contracts/HumanityRegistry.json\";\nimport HumanityGovernanceJSON from \"./contracts/HumanityGovernance.json\";\nimport TwitterHumanityApplicantJSON from \"./contracts/TwitterHumanityApplicant.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nconst boolToYesNo = (isYes) => {\n  if (isYes) {\n    return <span className=\"text-success\">Yes</span>\n  } else {\n    return <span className=\"text-danger\">No</span>\n  }\n}\n\nconst formatStrWithYesNo = (isYes, str) => {\n  if (isYes) {\n    return <span className=\"text-success\">{ str }</span>\n  } else {\n    return <span className=\"text-danger\">{ str }</span>\n  }\n};\n\nconst results = {\n  0: <span className=\"text-info\">Pending</span>,\n  1: <span className=\"text-success\">Yes</span>,\n  2: <span className=\"text-danger\">No</span>,\n};\nconst resultIdxToString = resultIdx => {\n  return results[resultIdx];\n};\n\nconst addressToEtherscanLink = (address) => {\n  return <a href={ `https://etherscan.io/address/${address}` } target=\"_blank\" rel=\"noopener noreferrer\">{ address }</a>;\n};\n\nconst txHashToEtherscanLink = (txHash) => {\n  const shortenTxHash = `${txHash.substring(0, 8)}...`\n  return <a href={ `https://etherscan.io/tx/${txHash}` } target=\"_blank\" rel=\"noopener noreferrer\">{ shortenTxHash }</a>;\n};\n\nconst twitterUsernameToLink = (username) => {\n  return <a href={ `https://twitter.com/${username}` } target=\"_blank\" rel=\"noopener noreferrer\">@{ username }</a>;\n};\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    humanityRegistryContract: null,\n    humanityGovernanceContract: null,\n    twitterHumanityApplicantContract: null,\n    textToSearch: '',\n    proposal: null,\n    voteEvents: [],\n    removeVoteEvents: [],\n    applyEventsFromAddress: [],\n    applyEventsFromProposalId: [],\n    searchedAddress: '',\n    isSearching: false,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      const mainnetNetworkId = 1;\n      const humanityRegistryContract = new web3.eth.Contract(\n        HumanityRegistryJSON.abi,\n        HumanityRegistryJSON.networks[mainnetNetworkId].address\n      );\n      const humanityGovernanceContract = new web3.eth.Contract(\n        HumanityGovernanceJSON.abi,\n        HumanityGovernanceJSON.networks[mainnetNetworkId].address\n      );\n      const twitterHumanityApplicantContract = new web3.eth.Contract(\n        TwitterHumanityApplicantJSON.abi,\n        TwitterHumanityApplicantJSON.networks[mainnetNetworkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3,\n        accounts,\n        humanityRegistryContract,\n        humanityGovernanceContract,\n        twitterHumanityApplicantContract,\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  // fetchProposalIdFromAddress\n\n  fetchProposalState = async () => {\n    const {\n      web3,\n      textToSearch,\n      // humanityRegistryContract,\n      humanityGovernanceContract,\n      twitterHumanityApplicantContract,\n    } = this.state;\n\n    this.setState({ isSearching: true });\n\n    try {\n      let proposalIdStr = textToSearch;\n\n      if (web3.utils.isAddress(textToSearch)) {\n        const searchingAddress = textToSearch;\n\n        const applyEventsFromAddress = await twitterHumanityApplicantContract.getPastEvents('Apply', {\n          filter: {\n            applicant: searchingAddress,\n          },\n          fromBlock: 7723946,\n        });\n        console.log('applyEventsFromAddress', applyEventsFromAddress);\n        this.setState({\n          searchingAddress,\n          applyEventsFromAddress,\n        });\n\n        if (applyEventsFromAddress.length > 0) {\n          proposalIdStr = applyEventsFromAddress[0].returnValues.proposalId;\n        }\n      }\n      else {\n        this.setState({\n          searchingAddress: '',\n          applyEventsFromAddress: [],\n        });\n      }\n\n      const [proposal, voteEvents, removeVoteEvents, applyEventsFromProposalId] = await Promise.all([\n        humanityGovernanceContract.methods.getProposal(proposalIdStr).call(),\n        humanityGovernanceContract.getPastEvents('Vote', {\n          filter: {\n            proposalId: proposalIdStr,\n          },\n          fromBlock: 7723872,\n        }),\n        humanityGovernanceContract.getPastEvents('RemoveVote', {\n          filter: {\n            proposalId: proposalIdStr,\n          },\n          fromBlock: 7723872,\n        }),\n        twitterHumanityApplicantContract.getPastEvents('Apply', {\n          filter: {\n            proposalId: proposalIdStr,\n          },\n          fromBlock: 7723946,\n        }),\n      ]);\n      proposal.proposalIdStr = proposalIdStr;\n      console.log('proposal', proposal);\n      console.log('voteEvents', voteEvents);\n      console.log('removeVoteEvents', removeVoteEvents);\n      console.log('applyEventsFromProposalId', applyEventsFromProposalId);\n\n      this.setState({\n        isSearching: false,\n        proposal,\n        voteEvents,\n        removeVoteEvents,\n        applyEventsFromProposalId,\n      });\n    } catch (error) {\n      console.error(error);\n      alert('Wrong Proposal ID or Address.')\n      this.setState({ isSearching: false });\n    }\n  };\n\n  handleProposalIdTextChange = event => {\n    this.setState({textToSearch: event.target.value.trim()});\n  }\n\n  handleSearch = event => {\n    event.preventDefault();\n    this.fetchProposalState();\n  }\n\n  render() {\n    const {\n      web3,\n      applyEventsFromAddress,\n      searchingAddress,\n      proposal,\n      voteEvents,\n      removeVoteEvents,\n      applyEventsFromProposalId,\n      isSearching,\n    } = this.state;\n\n    if (!web3) {\n      return <div className=\"App pt-5\">\n        <div className=\"spinner-grow\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>;\n    }\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <span className=\"navbar-brand mb-0 h1\">HumanityDAO Applicant Status Checker</span>\n        </nav>\n\n        <div className=\"container pt-3 pb-3\">\n          <form onSubmit={this.handleSearch} className=\"form-inline justify-content-center mb-5\">\n            <input type=\"text\" className=\"form-control\" value={this.state.textToSearch} onChange={this.handleProposalIdTextChange} placeholder=\"Proposal ID or Address\" />\n            <input type=\"submit\" className=\"btn btn-primary\" value=\"Search\" />\n          </form>\n\n          { isSearching &&\n            <div className=\"spinner-grow\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          }\n\n          { applyEventsFromAddress.length > 0 &&\n            <div className=\"mb-3\">\n              <h3>Proposals from Address</h3>\n              <div>\n                {\n                  applyEventsFromAddress.map(event => {\n                    return <span>#{ event.returnValues.proposalId } </span>\n                  })\n                }\n              </div>\n            </div>\n          }\n\n          { proposal &&\n            <div className=\"mb-3\">\n              <h3>Proposal</h3>\n              <table className=\"table table-bordered\">\n                <tbody>\n                  <tr>\n                    <td className=\"bg-gray\">Proposal ID</td>\n                    <td>{ proposal.proposalIdStr }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Address</td>\n                    <td>{ addressToEtherscanLink(proposal.feeRecipient) }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Twitter</td>\n                    <td>{ twitterUsernameToLink(applyEventsFromProposalId[0].returnValues.username) }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Starting Time</td>\n                    <td>{ moment.unix(parseInt(proposal.startTime)).format('MMM DD YYYY HH:mm:ss Z') }</td>\n                    {/* <td>{ (new Date(parseInt(proposal.startTime) * 1000)).toISOString() }</td> */}\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Votes (Yes / No)</td>\n                    <td>{ formatStrWithYesNo(true, web3.utils.fromWei(proposal.yesCount)) } / { formatStrWithYesNo(false, web3.utils.fromWei(proposal.noCount)) }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Result</td>\n                    <td>{ resultIdxToString(proposal.result) }</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          }\n\n          { voteEvents.length > 0 &&\n            <div className=\"mb-3\">\n              <h3>Vote Events</h3>\n              <table className=\"table table-bordered\">\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th>TX</th>\n                    <th>Voter</th>\n                    <th>Voted for</th>\n                    <th>Weight</th>\n                  </tr>\n                </thead>\n                <tbody>\n                {\n                  voteEvents.map((event, index) => {\n                    const values = event.returnValues;\n                    return <tr key={ 'vote-event-' + index }>\n                      <td>{ txHashToEtherscanLink(event.transactionHash) }</td>\n                      {/* <td>{ moment.unix(parseInt(event.startTime)).format('MMM DD YYYY HH:mm:ss Z') }</td> */}\n                      <td>{ addressToEtherscanLink(values.voter) }</td>\n                      <td>{ boolToYesNo(values.approve) }</td>\n                      <td>{ formatStrWithYesNo(values.approve, web3.utils.fromWei(values.weight)) }</td>\n                    </tr>;\n                  })\n                }\n                </tbody>\n              </table>\n            </div>\n          }\n\n          { removeVoteEvents.length > 0 &&\n            <div className=\"mb-3\">\n              <h3>RemoveVote Events</h3>\n            <table className=\"table table-bordered\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th>TX</th>\n                  <th>Voter</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  removeVoteEvents.map((event, index) => {\n                    const values = event.returnValues;\n                    return <tr key={ 'vote-event-' + index }>\n                      <td>{ txHashToEtherscanLink(event.transactionHash) }</td>\n                      <td>{ addressToEtherscanLink(values.voter) }</td>\n                    </tr>;\n                  })\n                }\n                </tbody>\n              </table>\n            </div>\n          }\n        </div>\n\n        <footer className=\"footer bg-light\">\n          <div className=\"container\">\n            <div className=\"text-muted\"><a href=\"https://github.com/Roger-Wu/humanitydao-applicant-status-checker\" target=\"_blank\" rel=\"noopener noreferrer\">Source Code on GitHub</a></div>\n            <div className=\"text-muted\">Donate ETH or tokens: { addressToEtherscanLink('0x36fAa1e49fF125ac72ceae0d5a2E35bC9aDD6591') }</div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}